rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	
    // Functions
		function filterCreateOrder(orderData) {
      return
      	validateOrderSchema(orderData) &&
        orderData.status == 'pending';
    }
    
    function filterCreatePayment(paymentData) {
      return
      	validatePaymentSchema(paymentData) &&
        paymentData.status == 'waiting';
    }
    
    // Order Schema
    function validateOrderSchema(orderData) {
    	return
        validateUserSchema(orderData.user) &&
        (!('payment' in orderData) || validatePaymentSchema(orderData.payment)) &&
        orderData.status in ['pending', 'processing', 'completed', 'cancelled'];
    }
    
    // User Schema
    function validateUserSchema(userData) {
    	return
      	userData.fullname is string &&
      	isValidEmail(userData.email);
    }
    
    // Payment Schema
    function validatePaymentSchema(paymentData) {
    	return paymentData.id is string &&
      	paymentData.method is string &&
      	paymentData.status is string &&
        paymentData.status in ['waiting', 'paid', 'cancelled'];
    }
    
    // Only Admin User
    function isAdmin() {
    	return request.auth.token.adminAccount == true;
    }
    
    // Validate email
    function isValidEmail(email) {
    	return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,5}$');
    }
    
    // Read orders
  	match /orders/{orderId} {
    	// Applies to single document read requests
      allow get: if true;

      // Applies to queries and collection read requests
      allow read: if isAdmin();
    }
    
    // Write orders
    match /orders/{orderId} {
    	allow write: if isAdmin();
      allow create: if filterCreateOrder(request.resource.data);
      
      // Create Payment conditions
      match /payment/{document=**} {
        allow create: if filterCreatePayment(request.resource.data);
      }
      
    }
  }
}